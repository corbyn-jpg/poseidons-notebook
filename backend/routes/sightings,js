const express = require('express');
const router = express.Router();
const Species = require('../models/Species');
const Sighting = require('../models/Sighting');

// Get all sightings
router.get('/', async (req, res) => {
  try {
    const sightings = await Sighting.findAll({
      include: [{
        model: Species,
        attributes: ['common_name', 'scientific_name']
      }],
      order: [['sighting_date', 'DESC']]
    });
    res.json(sightings);
  } catch (error) {
    console.error('Error fetching sightings:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create new sighting
router.post('/', async (req, res) => {
  try {
    const { species_id, common_name, scientific_name, category, location, date, depth, notes, image_url } = req.body;
    
    let finalSpeciesId = species_id;

    // If no species_id provided, create new species
    if (!species_id && common_name && scientific_name) {
      const newSpecies = await Species.create({
        common_name,
        scientific_name,
        category: category || 'Unknown',
        conservation_status: 'DD', // Data Deficient by default
        image_url: image_url || null
      });
      finalSpeciesId = newSpecies.species_id;
    }

    // Create the sighting
    const sighting = await Sighting.create({
      species_id: finalSpeciesId,
      location,
      sighting_date: date || new Date(),
      depth,
      notes,
      image_url: image_url || null
    });

    // Return the sighting with species data
    const result = await Sighting.findByPk(sighting.sighting_id, {
      include: [{
        model: Species,
        attributes: ['common_name', 'scientific_name', 'category']
      }]
    });

    res.status(201).json(result);
  } catch (error) {
    console.error('Error creating sighting:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;